name: CD

on:
  push:
    tags: ['v*']

jobs:
  release:
    name: 'CD: Docker & Vercel Deploy'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Generate Prisma Client
        env:
          DATABASE_URL: 'postgresql://user:pass@localhost:5432/dummy'
        run: npx prisma generate

      - name: Build project
        run: pnpm build

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase username
        id: set-username
        run: echo "username=${GITHUB_ACTOR,,}" >> $GITHUB_OUTPUT

      - name: Build & push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ghcr.io/${{ steps.set-username.outputs.username }}/url-shortener:${{ github.ref_name }}
            ghcr.io/${{ steps.set-username.outputs.username }}/url-shortener:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Vercel
        id: deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "🚀 Deploying to Vercel..."
          npx vercel pull --yes --environment=production --token $VERCEL_TOKEN
          npx vercel build --prod --token $VERCEL_TOKEN
          DEPLOYMENT_URL=$(npx vercel deploy --prebuilt --prod --token $VERCEL_TOKEN)
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "✅ Deployment completed: $DEPLOYMENT_URL"

      - name: Verify Deployment
        env:
          DEPLOYMENT_URL: ${{ steps.deploy.outputs.deployment-url }}
        run: |
          echo "🔍 Verifying deployment..."
          echo "Deployment URL: $DEPLOYMENT_URL"

          # Wait for deployment to be ready
          echo "⏳ Waiting for deployment to be ready..."
          sleep 15

          # Health check with retry logic
          echo "🏥 Running health check..."
          for i in {1..5}; do
            if curl -f -s "$DEPLOYMENT_URL/health" > /dev/null; then
              echo "✅ Health check passed on attempt $i"
              echo "🌐 Production URL: $DEPLOYMENT_URL"
              echo "📚 Swagger UI: $DEPLOYMENT_URL/api-docs"
              echo "🧪 API Tester: $DEPLOYMENT_URL/api-tester-advanced.html"
              echo "📊 Metrics: $DEPLOYMENT_URL/metrics"
              exit 0
            else
              echo "⚠️ Health check attempt $i failed, retrying in 10s..."
              sleep 10
            fi
          done

          echo "❌ Health check failed after 5 attempts"
          echo "🔍 Deployment may still be starting up. Check manually at: $DEPLOYMENT_URL"
          exit 1
